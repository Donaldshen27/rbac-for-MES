paths:
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Get a paginated list of users with optional filters
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/orderParam'
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: roleId
          in: query
          description: Filter by role ID
          schema:
            type: string
            format: uuid
        - name: isSuperuser
          in: query
          description: Filter by superuser status
          schema:
            type: boolean
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Users retrieved successfully
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        $ref: '#/components/schemas/PaginationMeta'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user (admin only)
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                password:
                  type: string
                  format: password
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
                isActive:
                  type: boolean
                  default: true
                isSuperuser:
                  type: boolean
                  default: false
                roleIds:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User created successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /users/statistics:
    get:
      tags:
        - Users
      summary: Get user statistics
      description: Get statistics about users (admin only)
      operationId: getUserStatistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User statistics retrieved successfully
                  data:
                    type: object
                    properties:
                      statistics:
                        type: object
                        properties:
                          totalUsers:
                            type: integer
                            example: 150
                          activeUsers:
                            type: integer
                            example: 120
                          inactiveUsers:
                            type: integer
                            example: 30
                          superusers:
                            type: integer
                            example: 3
                          newUsersToday:
                            type: integer
                            example: 5
                          newUsersThisWeek:
                            type: integer
                            example: 15
                          newUsersThisMonth:
                            type: integer
                            example: 45
                          usersByRole:
                            type: array
                            items:
                              type: object
                              properties:
                                roleId:
                                  type: string
                                  format: uuid
                                roleName:
                                  type: string
                                count:
                                  type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /users/export:
    get:
      tags:
        - Users
      summary: Export users
      description: Export users to CSV format
      operationId: exportUsers
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          description: Export format
          schema:
            type: string
            enum: [csv]
            default: csv
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
        - name: roleId
          in: query
          description: Filter by role ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Export successful
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /users/bulk/status:
    post:
      tags:
        - Users
      summary: Bulk update user status
      description: Activate or deactivate multiple users at once
      operationId: bulkUpdateStatus
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
                - isActive
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  maxItems: 100
                isActive:
                  type: boolean
      responses:
        '200':
          description: Bulk update successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Bulk status update completed
                  data:
                    type: object
                    properties:
                      updated:
                        type: integer
                        example: 10
                      failed:
                        type: integer
                        example: 2
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: string
                              format: uuid
                            error:
                              type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /users/bulk/delete:
    post:
      tags:
        - Users
      summary: Bulk delete users
      description: Delete multiple users at once
      operationId: bulkDeleteUsers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 1
                  maxItems: 100
      responses:
        '200':
          description: Bulk delete successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Bulk delete completed
                  data:
                    type: object
                    properties:
                      deleted:
                        type: integer
                        example: 8
                      failed:
                        type: integer
                        example: 2
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: string
                              format: uuid
                            error:
                              type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get detailed information about a specific user
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                firstName:
                  type: string
                lastName:
                  type: string
                isActive:
                  type: boolean
                isSuperuser:
                  type: boolean
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user (soft delete)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{id}/restore:
    post:
      tags:
        - Users
      summary: Restore deleted user
      description: Restore a soft-deleted user
      operationId: restoreUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: User restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User restored successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{id}/reset-password:
    post:
      tags:
        - Users
      summary: Reset user password
      description: Reset a user's password (admin only)
      operationId: resetUserPassword
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                newPassword:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{id}/roles:
    put:
      tags:
        - Users
      summary: Update user roles
      description: Update the roles assigned to a user
      operationId: updateUserRoles
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleIds
              properties:
                roleIds:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Roles updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User roles updated successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'